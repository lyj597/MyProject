<?xml version="1.0"?>
<doc>
    <assembly>
        <name>MyCoreAPI</name>
    </assembly>
    <members>
        <member name="M:MyCoreAPI.Controllers.AccountController.#ctor(MyCoreAPI.Jwt.ITokenHelper,Microsoft.Extensions.Options.IOptions{MyCoreAPI.Jwt.JWTConfig})">
            <summary>
            构造函数
            </summary>
            <param name="_tokenHelper"></param>
            <param name="options"></param>
        </member>
        <member name="M:MyCoreAPI.Controllers.AccountController.Login(MyCoreAPI.Models.LoginInput)">
            <summary>
            登录
            </summary>
            <param name="input"></param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Controllers.AccountController.ValiToken(System.String)">
            <summary>
            验证Token
            </summary>
            <param name="tokenStr">token</param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Controllers.AccountController.ValiTokenState(System.String)">
            <summary>
            验证Token 带返回状态
            </summary>
            <param name="tokenStr"></param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Controllers.WeatherForecastController.Get">
            <summary>
            这是一个获取天气的接口
            </summary>
            <returns></returns>
        </member>
        <member name="T:MyCoreAPI.Jwt.ITokenHelper">
            <summary>
            token工具类的接口，方便使用依赖注入，很简单提供两个常用的方法
            </summary>
        </member>
        <member name="M:MyCoreAPI.Jwt.ITokenHelper.CreateToken``1(``0)">
            <summary>
            根据一个对象通过反射提供负载生成token
            </summary>
            <typeparam name="T"></typeparam>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Jwt.ITokenHelper.CreateToken(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据键值对提供负载生成token
            </summary>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Jwt.ITokenHelper.ValiToken(System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean})">
            <summary>
            Token验证
            </summary>
            <param name="encodeJwt">token</param>
            <param name="validatePayLoad">自定义各类验证； 是否包含那种申明，或者申明的值</param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Jwt.ITokenHelper.ValiTokenState(System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean},System.Action{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            带返回状态的Token验证
            </summary>
            <param name="encodeJwt">token</param>
            <param name="validatePayLoad">自定义各类验证； 是否包含那种申明，或者申明的值</param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="T:MyCoreAPI.Jwt.JWTConfig">
            <summary>
            配置token生成信息
            </summary>
        </member>
        <member name="P:MyCoreAPI.Jwt.JWTConfig.Issuer">
            <summary>
            Token发布者
            </summary>
        </member>
        <member name="P:MyCoreAPI.Jwt.JWTConfig.Audience">
            <summary>
            oken接受者
            </summary>
        </member>
        <member name="P:MyCoreAPI.Jwt.JWTConfig.IssuerSigningKey">
            <summary>
            秘钥
            </summary>
        </member>
        <member name="P:MyCoreAPI.Jwt.JWTConfig.AccessTokenExpiresMinutes">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="T:MyCoreAPI.Jwt.TnToken">
            <summary>
            存放Token 跟过期时间的类
            </summary>
        </member>
        <member name="P:MyCoreAPI.Jwt.TnToken.TokenStr">
            <summary>
            token
            </summary>
        </member>
        <member name="P:MyCoreAPI.Jwt.TnToken.Expires">
            <summary>
            过期时间
            </summary>
        </member>
        <member name="T:MyCoreAPI.Jwt.TokenHelper">
            <summary>
            Token生成类
            </summary>
        </member>
        <member name="M:MyCoreAPI.Jwt.TokenHelper.CreateToken``1(``0)">
            <summary>
            根据一个对象通过反射提供负载生成token
            </summary>
            <typeparam name="T"></typeparam>
            <param name="user"></param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Jwt.TokenHelper.CreateToken(System.Collections.Generic.Dictionary{System.String,System.String})">
            <summary>
            根据键值对提供负载生成token
            </summary>
            <param name="keyValuePairs"></param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Jwt.TokenHelper.ValiToken(System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean})">
            <summary>
            验证身份 验证签名的有效性
            </summary>
            <param name="encodeJwt"></param>
            <param name="validatePayLoad">自定义各类验证； 是否包含那种申明，或者申明的值， </param>
        </member>
        <member name="M:MyCoreAPI.Jwt.TokenHelper.ToUnixEpochDate(System.DateTime)">
            <summary>
            时间转换
            </summary>
            <param name="date"></param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Jwt.TokenHelper.ValiTokenState(System.String,System.Func{System.Collections.Generic.Dictionary{System.String,System.String},System.Boolean},System.Action{System.Collections.Generic.Dictionary{System.String,System.String}})">
            <summary>
            验证当前状态
            </summary>
            <param name="encodeJwt"></param>
            <param name="validatePayLoad"></param>
            <param name="action"></param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Jwt.TokenHelper.CreateTokenString(System.Collections.Generic.List{System.Security.Claims.Claim})">
            <summary>
            生成token
            </summary>
            <param name="claims">List的 Claim对象</param>
            <returns></returns>
        </member>
        <member name="M:MyCoreAPI.Jwt.TokenHelper.GetPayLoadByToken(System.String)">
            <summary>
            通过Token值，获取PayLoad数据，其中可能会包含用户名和密码
            </summary>
            <param name="encodeJwt"></param>
            <returns></returns>
        </member>
    </members>
</doc>
